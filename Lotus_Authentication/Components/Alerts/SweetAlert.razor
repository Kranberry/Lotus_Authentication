@if (!IsHidden)
{
    <div class="component-base" @onclick="CloseAlert"></div>

    <div class="alertWidow b-shadow-lg">
        <div class="textWindow">
            @if(Icon != SweetAlertIcons.None)
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="@GetColor()" class="bi bi-check" viewBox="0 0 16 16">
                  <path d="@GetIcon()"/>
                </svg>   
            }
            <h4>@Text</h4>
        </div>
        <div class="buttons">
            @if (!string.IsNullOrWhiteSpace(CancelButtonText))
            {
                <LotusButton OnClickCallBack="@CancelClick" Class="@CancelBtnClass" Style="width: 100%;">@CancelButtonText</LotusButton>
            }
            <LotusButton OnClickCallBack="@OkClick" Class="@OkBtnClass" Style="width: 100%;">@OkButtonText</LotusButton>
        </div>
    </div>
}

@namespace Lotus_Authentication.Components
@code {
    [Parameter] public SweetAlertIcons Icon {get; set;} = SweetAlertIcons.None;
    [Parameter] public bool IsHidden { get; set; }
    [Parameter] public string Text { get; set; } = "";
    [Parameter] public string OkButtonText { get; set; } = "OK";
    [Parameter] public string CancelButtonText { get; set; } = "";
    [Parameter] public string OkBtnClass { get; set; } = "btn-purple";
    [Parameter] public string CancelBtnClass { get; set; } = "btn-pink";

    [Parameter] public EventCallback<Action> OkButtonCallBack { get; set; }
    [Parameter] public EventCallback<Action> CancelButtonCallBack { get; set; }

    [Parameter]
    public EventCallback<bool> IsHiddenChanged { get; set; }

    async Task UpdateIsHiddenChanged()
    {
        await IsHiddenChanged.InvokeAsync(IsHidden);
    }

    public async Task CloseAlert()
    {
        IsHidden = true;
        await UpdateIsHiddenChanged();
    }

    private string GetColor() => Icon switch
    {
        SweetAlertIcons.Success => "Green",
        SweetAlertIcons.Danger => "Red",
        _ => "Red"
    };

    private string GetIcon() => Icon switch
    {
        SweetAlertIcons.Success => "M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z",
        SweetAlertIcons.Danger => "M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z",
        _ => ""
    };

    private async Task OkClick()
    {
        if (OkButtonCallBack.HasDelegate)
            await OkButtonCallBack.InvokeAsync();

        await CloseAlert();
    }

    private async Task CancelClick()
    {
        if (CancelButtonCallBack.HasDelegate)
            await CancelButtonCallBack.InvokeAsync();
            
        await CloseAlert();
    }
}
