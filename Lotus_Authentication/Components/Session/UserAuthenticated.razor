@implements IDisposable
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject UserSessionManager Session

@if (IsAuthenticated)
{
	@ChildContent
}

@namespace Lotus_Authentication.Components
@code 
{
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public bool IsApiUser { get; set; } = false;
    [Parameter] public bool AnyUser { get; set; } = true;
    protected bool IsAuthenticated { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
            return;
        Session.SessionHasChangedEvent += CheckAuthentication;
        await CheckAuthentication(SessionState.LoggedIn);
    }

    private async Task CheckAuthentication(SessionState state)
    {
        switch (state)
        {
            case SessionState.LoggedIn:
                IsAuthenticated = await Session.IsLoggedIn(IsApiUser, AnyUser);
                break;
            case SessionState.LoggedOut:
            case SessionState.TokenExpired:
            case SessionState.TokenInvalid:
                IsAuthenticated = false;
                break;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        Session.SessionHasChangedEvent -= CheckAuthentication;
    }
}