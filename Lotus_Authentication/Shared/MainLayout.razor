@using System.Text.RegularExpressions
@inherits LayoutComponentBase
@inject UserSessionManager Session

<PageTitle>Lotus_Authentication</PageTitle>

<LotusLayout Layout="PageLayout.TopLayout">
	<NavBar Class="justify-content-center">
		<UserAuthenticated AnyUser="false">
			<NavBarItem Class="px-4" Href="/UserManagement">My Account</NavBarItem>
		</UserAuthenticated>
		<UserNotAuthenticated>
			<NavBarItem Class="px-4" Href="/UserManagement">Login</NavBarItem>
			<NavBarItem Class="px-4" OnClickCallback="@OpenModal">Register</NavBarItem>
		</UserNotAuthenticated>
		<NavBarItemSpacer SpacingAmount="20"></NavBarItemSpacer>
		<UserNotAuthenticated>
			<NavBarItem Class="px-4" Href="/ApiUserManagement">Login for the API</NavBarItem>
			<NavBarItem Class="px-4" Href="/api/documentation">API Documentation</NavBarItem>
		</UserNotAuthenticated>
		<UserAuthenticated IsApiUser="true" AnyUser="false">
			<NavBarItem Class="px-4" Href="/ApiUserManagement">Account</NavBarItem>
			<NavBarItem Class="px-4" Href="/api/documentation">API Documentation</NavBarItem>
			<NavBarItemSpacer SpacingAmount="20"></NavBarItemSpacer>
		</UserAuthenticated>
		<UserAuthenticated>
			<NavBarItem Class="px-4" OnClickCallback="@Logout">Logout</NavBarItem>
		</UserAuthenticated>
	</NavBar>
	<SideBar>

	</SideBar>

	<LotusMain>
		@Body
	</LotusMain>

	<Modal 
		IsContentSized="true" 
		IncludeModalFooter="false" 
		@bind-IsHidden="RegisterModalHidden"
	>
		<LotusForm>
			<h1 style="flex: 1; align-self: center;">Sign Up for free</h1>
			<hr />

			<FormLabel>All fields marked with * are mandatory</FormLabel>
			<FormLabel For="firstName">First name</FormLabel>
			<FormInput Class="@(!InputFields["FirstName"].IsValid ? "invalidInput" : "")" IncludeClearButton="false" @bind-Value="@InputFields["FirstName"].Value"	ID="firstName" InputType="text" ValidField="@InputFields["FirstName"].IsValid"/>
			<FormLabel For="lastName">Last name</FormLabel>
			<FormInput Class="@(!InputFields["LastName"].IsValid ? "invalidInput" : "")" IncludeClearButton="false" @bind-Value="@InputFields["LastName"].Value" ID="lastName" InputType="text" ValidField="@InputFields["LastName"].IsValid" />
			<FormLabel For="email">* Email address</FormLabel>
			<FormInput Class="@(!InputFields["EmailInput"].IsValid ? "invalidInput" : "")" IncludeClearButton="false" @bind-Value="@InputFields["EmailInput"].Value" ID="email" InputType="text" ValidField="@InputFields["EmailInput"].IsValid"/>
			<FormLabel For="userName">* User name</FormLabel>
			<FormInput Class="@(!InputFields["UserName"].IsValid ? "invalidInput" : "")" IncludeClearButton="false" @bind-Value="@InputFields["UserName"].Value" ID="userName" InputType="text" ValidField="@InputFields["UserName"].IsValid"/>
			@*<i class="tinyText bi bi-question-circle-fill" data-bs-toggle="tooltip" title="Atleast 8 long, 1 lowercase and uppercase letter, and 1 number."></i>*@
			<FormLabel>* Password <i class="bi bi-question-circle-fill text-primary" data-bs-toggle="tooltip" title="Atleast 8 characters long, 1 lowercase and uppercase letter, and 1 number."></i></FormLabel>
			<FormInput Class="@(!InputFields["Password"].IsValid ? "invalidInput" : "")" IncludeClearButton="false" @bind-Value="@InputFields["Password"].Value" ID="password" InputType="password" ValidField="@InputFields["Password"].IsValid"/>
			<FormLabel For="passwordAgain">* Password again</FormLabel>
			<FormInput Class="@(!InputFields["PasswordAgain"].IsValid ? "invalidInput" : "")" IncludeClearButton="false" @bind-Value="@InputFields["PasswordAgain"].Value" ID="passwordAgain" InputType="password" ValidField="@InputFields["PasswordAgain"].IsValid"/>
			<FormLabel for="gender">* Gender</FormLabel>
			<FormSelect Options="GenderOptions" @bind-SelectedValue="@InputFields["Gender"].Value"></FormSelect>
			<FormLabel for="country">* Country</FormLabel>
			<FormSelect Options="CountryOptions" @bind-SelectedValue="@InputFields["Country"].Value"></FormSelect>
			
			<hr />
			<FormLabel Class="@Wiggle" Style="color: red; font-size: 1.2em; flex: 1; align-self: center;">[ @SignUpErrorText ]</FormLabel>
			<div style="width: 100%; display: flex; flex-direction: row; justify-content: space-evenly; margin-top: 10px;">
				<LotusButton Class="btn-pink col-4" OnClickCallBack="@ClearInputs">Clear</LotusButton>
				<LotusButton Class="col-7" OnClickCallBack="@RegisterNewAccount">Register</LotusButton>
			</div>
		</LotusForm>
	</Modal>

	<SweetAlert 
		Icon="SweetAlertIcons.Success"
		Text="An email has been sent to you for verification"
		@bind-IsHidden="RegisterSuccessfullModalHidden"
	>
	</SweetAlert>
</LotusLayout>

@code
{
	private bool RegisterModalHidden = true;
	private bool RegisterSuccessfullModalHidden = true;
	private string SignUpErrorText = "";

	private Gender SelectedGender = Gender.Other;
	private string[] GenderOptions = Enum.GetNames(typeof(Gender));

	private IEnumerable<Country> AvailableCountries = DbHandler.GetAllCountries();
	private string[] CountryOptions = new string[0];
	private Country SelectedCountry { get; set; }

	private class InputValidThing
	{
		internal string Value { get; set; } = "";
		internal bool IsValid { get; set; } = false;
	}

	private Dictionary<string, InputValidThing> InputFields = new()
	{
		{"FirstName", new(){ IsValid = true }},
		{"LastName", new(){ IsValid = true }},
		{"EmailInput", new()},
		{"UserName", new()},
		{"Password", new()},
		{"PasswordAgain", new()},
		{"Gender", new()},
		{"Country", new()}
	};

	private string ValidEmailEntry = "";
	private string ValidUsernameEntry = "";
	private string ValidPasswordEntry = "";
	private string ValidPasswordAgainEntry = "";
	private string ValidSEEntry = "";
	private string Wiggle = "";
	private bool errorWiggle = false;

	private void OpenModal() => RegisterModalHidden = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		CountryOptions = AvailableCountries.Select(c => c.NiceName).ToArray();
		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task SetCountry(string countryName)
	{
		SelectedCountry = AvailableCountries.Single(c => c.NiceName == countryName);
	}

	private async Task ClearInputs()
	{
		foreach(KeyValuePair<string, InputValidThing> kvp in InputFields)
		{
			InputFields[kvp.Key].Value = "";
		}
	}

	private bool IsPasswordValid(string password)
	{
		Regex atleastOneNumber = new(@"\d");
		Regex atleastOneLowerCase = new(@"[A-Z]");
		Regex atleastOneUpperCase = new(@"[a-z]");

		return atleastOneLowerCase.IsMatch(password) && atleastOneUpperCase.IsMatch(password) && atleastOneNumber.IsMatch(password) && password.Length >= 8;
	}

	private async Task Logout() => await Session.LogOut();

	private async Task RegisterNewAccount()
	{
		InputFields["EmailInput"].IsValid = EmailValidator.IsValidEmail(InputFields["EmailInput"].Value);
		InputFields["UserName"].IsValid = InputFields["UserName"].Value.Length >= 6;
		InputFields["Password"].IsValid = IsPasswordValid(InputFields["Password"].Value);
		InputFields["PasswordAgain"].IsValid = InputFields["Password"].Value == InputFields["PasswordAgain"].Value;
		InputFields["Gender"].IsValid = InputFields["Gender"] is not null;
		InputFields["Country"].IsValid = InputFields["Country"] is not null;

		bool allFieldsValid = InputFields.Where(kvp => !kvp.Value.IsValid).Count() == 0;
		if (SelectedCountry is null)
			SelectedCountry = AvailableCountries.Single(c => c.Id == 1);

		if (allFieldsValid)
		{
			User user = new(0, InputFields["FirstName"].Value, InputFields["LastName"].Value, InputFields["EmailInput"].Value, InputFields["UserName"].Value, UserType.Regular, SelectedGender, SelectedCountry.Iso2, SelectedCountry.NumCode, SelectedCountry.PhoneCode, DateTime.UtcNow, null, false);
			user.SetPassword(SHA1Hash.Hash(InputFields["Password"].Value));
			try
			{
				await DbHandler.InsertUser(user, AppConfig.SkeletonKey);

				foreach (KeyValuePair<string, InputValidThing> kvp in InputFields)
					kvp.Value.Value = "";

				SignUpErrorText = "";
				RegisterModalHidden = true;
				RegisterSuccessfullModalHidden = false;
			}
			catch (UserAlreadyExistsException)
			{
				SignUpErrorText = "A user with this email or username already exists";
				errorWiggle = true;
			}
		}
		else
		{
			SignUpErrorText = "All fields marked with * are mandatory";
			errorWiggle = true;
		}

		if(errorWiggle)
		{
			Wiggle = "wiggle";
			await Task.Delay(500);
			Wiggle = "";
			errorWiggle = false;
		}
	}
}