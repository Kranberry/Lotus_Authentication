@page "/api/documentation"
@using System.Xml
@using Lotus_Authentication.API.ApiDocumentation
@using System.Xml.Serialization
@inject Enviourment Env

<h1>ApiDocumentation</h1>
<div class="alert alert-primary">
    <h2>base url: @Env.WebUrl</h2>
</div>

<div style="display: flex; flex-direction: column;">
    @foreach(Method method in Doc.Methods.Where(m => m.Name.Contains("API.Controllers")))
    {
        <div class="">
            <h4><u>@method.Route</u></h4>

            @if (method.IsActive)
            {
                <h3>@method.GetControllerName()</h3>
            }
            else
            {
                <h3>@method.GetControllerName() : <span class="badge bg-danger">Inactive</span></h3>
            }
            <h6>Method: <span class="@GetMethodClass(method.RestMethod)">@method.RestMethod</span></h6>
            <p>Name: @method.GetNiceName()</p>
            <p>Summary: @method.Summary</p>
            <p>Returns: @method.Returns</p>
            <h3>Headers</h3>
            @foreach(Parameter param in method.HeaderParameters)
            {
                <p>@(param.Required ? "*" : "") @param.Name : @param.Value</p>
            }

            @if(method.QueryParameters.Count() > 0)
            {
                <h3>Route parameters</h3>
                @foreach(Parameter param in method.QueryParameters)
                {
                    <p>@(param.Required ? "*" : "") @param.Name : @param.Value</p>
                }   
            }

            @if(method.BodyParameters.Count() > 0)
            {
                <h3>Body</h3>
                @foreach(Parameter param in method.BodyParameters)
                {
                    <p>@(param.Required ? "*" : "") @param.Name : @param.Value</p>
                }   
            }

            <h3>Status Codes</h3>
            @foreach(Result result in method.Results)
            {
                <div class="@GetStatusClass(result.StatusCode)">
                   <p>@result.StatusCode ::: @result.Summary</p>
                </div>
            }
            <hr />
        </div>
    }
</div>

@code 
{
    private string XmlDocumentPath = "Documentation.xml";
    private DocumentationModel Doc { get; set; }

    protected override void OnInitialized()
    {
        XmlSerializer serializer = new(typeof(DocumentationModel));
        using(Stream reader = new FileStream(Env.GetWWWRootPath() + XmlDocumentPath, FileMode.Open))
        {
            Doc = (DocumentationModel)serializer.Deserialize(reader);
        }
    }

    private string GetStatusClass(int statusCode) => statusCode switch
    {
        (>= 200 and < 300) => "alert alert-success",
        (>= 300 and < 400) => "alert alert-warning",
        (>= 400 and < 500) => "alert alert-danger",
        _ => "alert alert-info"
    };

    private string GetMethodClass(string method) => method switch
    {
        "POST" => "badge bg-primary",
        "DELETE" => "badge bg-danger",
        "GET" => "badge bg-info text-dark",
        "PUT" => "badge bg-primary",
        _ => "badge bg-dark",
    };
}
